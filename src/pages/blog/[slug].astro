---
import { getCollection, getEntry } from "astro:content";
import Header from "~/components/header.astro";
import Footer from "~/components/footer.astro";
import ContentSection from "~/components/content-section.astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

import "~/styles/theme.css";
import 'katex/dist/katex.min.css';

// Generate paths for all blogs
export async function getStaticPaths() {
  const blogEntries = await getCollection("blogs");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the entry for this page
const { entry } = Astro.props;
const { Content } = await entry.render();

// Format date
const formattedDate = new Intl.DateTimeFormat("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
}).format(entry.data.pubDate);

// Try to get section data if available
let sectionData = null;
if (entry.data.section) {
  try {
    // Try to fetch section by slug (convert section name to slug format)
    const sectionSlug = entry.data.section.toLowerCase().replace(/\s+/g, '-');
    sectionData = await getEntry('sections', sectionSlug);
  } catch (e) {
    // Section doesn't exist in the collection - will be handled dynamically
    sectionData = null;
  }
}

// Get section info if available
const sectionName = entry.data.section || null;
const sectionTextIcon = sectionData?.data?.icon || null;
const sectionIconImage = sectionData?.data?.iconImage || null;
const sectionColor = sectionData?.data?.color || null; 
const sectionImage = sectionData?.data?.image || null;

// Determine which image to display - blog image takes precedence
const displayImage = entry.data.image || sectionImage || null;

// Get related blogs (by section or similar content)
const allBlogs = await getCollection("blogs");
const relatedBlogs = allBlogs
  .filter(
    (blog) =>
      // Not the current blog
      blog.slug !== entry.slug &&
      // Not hidden
      !blog.data.hidden &&
      // Same section or similar title/description
      ((entry.data.section && blog.data.section === entry.data.section) ||
        (blog.data.title.toLowerCase().includes(entry.data.title.toLowerCase().split(' ')[0]) ||
         blog.data.description.toLowerCase().includes(entry.data.title.toLowerCase().split(' ')[0]))),
  )
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 3); // Limit to 3 related blogs

// Reading time calculation
const wordsPerMinute = 200;
const wordCount = entry.body.split(/\s+/).length;
const readingTime = Math.ceil(wordCount / wordsPerMinute);
---

<!doctype html>
<html lang="en" class="h-full motion-safe:scroll-smooth" data-theme="dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <meta content="#ec4899" data-react-helmet="true" name="theme-color" />
    <meta name="generator" content={Astro.generator} />
    <title>{entry.data.title} | sealldev</title>
    <meta name="description" content={entry.data.description} />

    <!-- social media -->
    <meta property="og:title" content={`${entry.data.title} | sealldev`} />
    <meta property="og:type" content="article" />
    <meta property="og:description" content={entry.data.description} />

    <!-- initialize theme -->
    <script is:inline>
      const themeSaved = localStorage.getItem("theme");

      if (themeSaved) {
        document.documentElement.dataset.theme = themeSaved;
      } else {
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        document.documentElement.dataset.theme = prefersDark ? "dark" : "light";
      }
    </script>

    <!-- Initialise Flowbite -->
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"
    ></script>
  </head>

  <body
    class="h-full overflow-x-hidden bg-default text-default text-base selection:bg-secondary selection:text-white"
  >
    <Header />

    <main>
      <article class="pb-32 pt-24">
        <div class="mx-auto max-w-4xl px-8">
          <div class="mb-8">
            <a
              href="/blog"
              class="hover:text-primary/70 flex items-center gap-2 text-primary"
            >
              <Icon name="mdi:arrow-left" class="size-5" />
              Back to Blog
            </a>
          </div>

          <header class="mb-8">
            <h1 class="text-text gradient-text mb-4 font-bold text-4xl">
              {entry.data.title}
            </h1>

            <div class="mb-4 flex flex-wrap gap-4 items-center">
              <time
                datetime={entry.data.pubDate.toISOString()}
                class="text-text-offset flex items-center gap-1"
              >
                <Icon name="mdi:calendar" class="size-4" />
                {formattedDate}
              </time>

              <div class="text-text-offset flex items-center gap-1">
                <Icon name="mdi:clock-outline" class="size-4" />
                <span>{readingTime} min read</span>
              </div>

              {
                entry.data.author && (
                  <div class="text-text-offset flex items-center gap-1">
                    <Icon name="mdi:account" class="size-4" />
                    by <span class="text-primary">{entry.data.author}</span>
                  </div>
                )
              }
            </div>

            <div class="mb-3 flex flex-wrap gap-2">
              {/* Section with icon if available */}
              {
                sectionName && (
                  <span 
                    class="rounded-full px-3 py-1 font-medium text-white text-sm flex items-center"
                    style={sectionColor ? `background-color: ${sectionColor}` : 'background-color: var(--color-primary)'}>
                    
                    {/* Section icon - show image icon first, then fall back to text icon */}
                    {sectionIconImage ? (
                      <Image 
                        src={sectionIconImage} 
                        alt={`${sectionName} icon`}
                        width={16}
                        height={16}
                        class="mr-1.5"
                      />
                    ) : sectionTextIcon ? (
                      <span class="mr-1.5">{sectionTextIcon}</span>
                    ) : null}
                    
                    {sectionName}
                  </span>
                )
              }
            </div>
          </header>

          {/* Featured image with gradient background styling similar to BlogCard */}
          {displayImage ? (
            <div class="relative h-64 w-full rounded-lg mb-8 overflow-hidden">
              {/* Gradient background */}
              <div class="absolute inset-0 bg-gradient-to-r from-primary to-secondary"></div>
              
              {/* Title overlay (top-left when image is present) */}
              <div class="absolute top-4 left-4 w-3/5 text-white z-10">
                <span class="font-bold text-xl break-words">
                  {entry.data.title}
                </span>
              </div>
              
              {/* Image - positioned like in BlogCard */}
              <div class="absolute right-4 top-1/2 -translate-y-1/2 overflow-hidden rounded-lg border-2 border-white/50 shadow-lg h-48 w-48">
                <Image
                  src={displayImage}
                  alt={entry.data.title}
                  class="h-full w-full object-cover"
                  width={500}
                  height={500}
                />
              </div>
            </div>
          ) : (
            <div class="relative h-64 w-full rounded-lg mb-8 overflow-hidden">
              {/* Gradient background with centered text when no image */}
              <div class="absolute inset-0 bg-gradient-to-r from-primary to-secondary flex items-center justify-center text-center p-4">
                <span class="font-bold text-xl break-words text-white">
                  {entry.data.title}
                </span>
              </div>
            </div>
          )}

          <div
            class="prose prose-lg dark:prose-invert max-w-none"
            id="blog-content"
          >
            <Content />
          </div>

          <!-- Related blogs by section or similar content -->
          {
            relatedBlogs.length > 0 && (
              <div class="border-border mt-16 border-t pt-8">
                <h2 class="mb-4 font-bold text-2xl">Related Posts</h2>
                <div class="space-y-4">
                  {relatedBlogs.map((blog) => (
                    <a
                      href={`/blog/${blog.slug}`}
                      class="border-border hover:bg-background-offset block rounded-lg border p-4 transition-all hover:border-primary"
                    >
                      <h3 class="mb-1 font-bold text-lg">
                        {blog.data.title}
                      </h3>
                      <p class="text-text-offset mb-2 text-sm">
                        {blog.data.description.slice(0, 120)}
                        {blog.data.description.length > 120 ? "..." : ""}
                      </p>
                      <div class="text-text-offset text-xs">
                        {new Intl.DateTimeFormat("en-US", {
                          year: "numeric",
                          month: "short",
                          day: "numeric",
                        }).format(blog.data.pubDate)}
                      </div>
                    </a>
                  ))}
                </div>
              </div>
            )
          }

          {/* Share and contribution section */}
          <div class="border-border mt-12 border-t pt-8">
            <div
              class="flex flex-col items-start justify-between gap-6 sm:flex-row"
            >
              <div>
                <h3 class="mb-2 font-bold text-lg">Share this post</h3>
                <div class="flex gap-2">
                  <a
                    href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(entry.data.title)}&url=${encodeURIComponent(`https://seall.dev/blog/${entry.slug}`)}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="bg-background-offset hover:bg-background-alt rounded-full p-2 transition-colors"
                    aria-label="Share on Twitter"
                  >
                    <Icon name="mdi:twitter" class="text-text-offset size-5" />
                  </a>
                  <a
                    href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(`https://seall.dev/blog/${entry.slug}`)}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="bg-background-offset hover:bg-background-alt rounded-full p-2 transition-colors"
                    aria-label="Share on LinkedIn"
                  >
                    <Icon name="mdi:linkedin" class="text-text-offset size-5" />
                  </a>
                  <button
                    id="copy-link-btn"
                    class="bg-background-offset hover:bg-background-alt rounded-full p-2 transition-colors"
                    aria-label="Copy link"
                  >
                    <Icon
                      name="mdi:link-variant"
                      class="text-text-offset size-5"
                    />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </article>
    </main>

    <Footer />

    <script>
      // Ensure the header always has the fixed-header class
      const header = document.getElementById("page-header");
      if (header) {
        header.classList.add("fixed-header");
      }
    
      // Copy link button functionality
      const copyLinkBtn = document.getElementById("copy-link-btn");
      if (copyLinkBtn) {
        copyLinkBtn.addEventListener("click", () => {
          navigator.clipboard.writeText(window.location.href);
    
          // Show temporary tooltip
          const tooltip = document.createElement("span");
          tooltip.textContent = "Link copied!";
          tooltip.className =
            "absolute -top-8 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-primary text-white text-xs rounded";
    
          copyLinkBtn.style.position = "relative";
          copyLinkBtn.appendChild(tooltip);
    
          setTimeout(() => {
            tooltip.remove();
          }, 2000);
        });
      }
    </script>

    <script>
      window.addEventListener("DOMContentLoaded", async () => {
        const { default: renderMathInElement } = await import("katex/contrib/auto-render/auto-render.js");
        renderMathInElement(document.body, {
          delimiters: [
            { left: "$$", right: "$$", display: true },
            { left: "\\[", right: "\\]", display: true },
            { left: "$", right: "$", display: false },
            { left: "\\(", right: "\\)", display: false }
          ]
        });
      });
    </script>
    
    <style is:global>
      /* Improved code block styling */
      .prose pre {
        color: var(--color-text);
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin: 1.25rem 0; /* Reduce vertical spacing */
      }

      /* Reduce bottom padding specifically to fix code block closing tag spacing */
      .prose pre code {
        padding-bottom: 0.1rem;
      }

      @media (max-width: 768px) { /* For handling KaTeX rendering on slim screens (mobile) */
        .katex-display {
          font-size: clamp(0.25rem, 6vw, 0.7rem) !important;
        }
      }

      /* Inline code styling */
      .prose code:not(pre code) {
        background-color: var(--color-background-alt);
        color: var(--color-primary);
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        font-size: 0.9em;
        font-weight: 500;
        white-space: pre-wrap;       /* Allow wrapping */
        word-wrap: break-word;       /* Break words when necessary */
        word-break: break-word;      /* More sophisticated word breaking */
        overflow-wrap: break-word;   /* Modern property for word wrapping */
        display: inline-block;       /* Change from inline to inline-block for better wrapping */
        max-width: 100%;             /* Ensure it doesn't exceed container width */
        box-decoration-break: clone; /* For consistent styling across line breaks */
      }

      /* Ensure paragraphs have proper spacing */
      .prose p {
        margin-bottom: 1.25rem;
        line-height: 1.6;
      }

      /* When there are consecutive paragraphs, ensure they have spacing */
      .prose p + p {
        margin-top: 1rem;
      }

      /* Fix blank lines in content */
      .prose br {
        display: block;
        content: "";
        margin-top: 1rem;
      }

      /* Improved header styling */
      .prose h1 {
        font-size: 2.25rem;
        margin-top: 2.5rem;
        margin-bottom: 1.5rem;
        font-weight: 700;
        color: var(--color-text);
        border-bottom: 2px solid var(--color-primary);
        padding-bottom: 0.5rem;
      }

      .prose h2 {
        font-size: 1.8rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
        font-weight: 600;
        color: var(--color-text);
        border-bottom: 1px solid var(--color-border);
        padding-bottom: 0.5rem;
      }

      .prose h3 {
        font-size: 1.5rem;
        margin-top: 1.75rem;
        margin-bottom: 0.75rem;
        font-weight: 600;
        color: var(--color-text);
      }

      .prose h4 {
        font-size: 1.25rem;
        margin-top: 1.5rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: var(--color-text);
      }

      /* Ensure blockquotes are styled properly */
      .prose blockquote {
        border-left: 4px solid var(--color-primary);
        padding: 0.5rem 0 0.5rem 1rem;
        margin: 1.5rem 0;
        font-style: italic;
        color: var(--color-text-offset);
        background-color: var(--color-background-offset);
        border-radius: 0 0.25rem 0.25rem 0;
      }

      .prose blockquote p {
        margin-bottom: 0;
      }

      /* Improved link styling */
      .prose a {
        text-decoration: underline;
        text-decoration-color: var(--color-primary);
        text-decoration-thickness: 1px;
        text-underline-offset: 2px;
        transition:
          text-decoration-thickness 0.2s,
          text-underline-offset 0.2s;
      }

      .prose a:hover {
        text-decoration-thickness: 2px;
        text-underline-offset: 3px;
      }

      /* Keep the gradient text styling for the page title only */
      .gradient-text {
        @apply bg-clip-text text-transparent;
        @apply bg-gradient-to-br from-pink-500 via-purple-500 to-indigo-500;
      }

      /* Unordered list styling */
      .prose ul {
        list-style-type: disc;
        margin-top: 1rem;
        margin-bottom: 1.5rem;
        padding-left: 1.5rem;
      }

      .prose ul li {
        margin-bottom: 0.5rem;
        position: relative;
      }

      /* Ordered list styling */
      .prose ol {
        list-style-type: decimal;
        margin-top: 1rem;
        margin-bottom: 1.5rem;
        padding-left: 1.5rem;
      }

      .prose ol li {
        margin-bottom: 0.5rem;
        position: relative;
      }

      /* Nested list styling */
      .prose ul ul,
      .prose ol ol,
      .prose ul ol,
      .prose ol ul {
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
      }

      /* Custom bullet color for light and dark themes */
      .prose ul li::marker {
        color: var(--color-primary);
      }

      .prose ol li::marker {
        color: var(--color-primary);
        font-weight: 500;
      }

      /* Meta information section styling with improved aesthetics */
      .blog-meta {
        background-color: rgba(var(--color-background-alt-rgb), 0.5);
        border-left: 4px solid var(--color-primary);
        padding: 1.5rem;
        margin-bottom: 2.5rem;
        border-radius: 0 0.5rem 0.5rem 0;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
      }

      .blog-meta h2 {
        font-size: 1.25rem !important; 
        margin-top: 0 !important;
        margin-bottom: 1rem !important;
        border-bottom: none !important;
        padding-bottom: 0 !important;
        color: var(--color-primary) !important;
        font-weight: 600 !important;
      }

      .blog-meta p {
        margin-bottom: 1rem !important;
        line-height: 1.6 !important;
        color: var(--color-text) !important;
      }

      .blog-meta ul {
        margin-top: 0.75rem !important;
        margin-bottom: 0 !important;
        list-style-type: none !important;
        padding-left: 0 !important;
      }

      .blog-meta li {
        margin-bottom: 0.5rem !important;
        display: flex !important;
        align-items: center !important;
        gap: 0.5rem !important;
      }

      .blog-meta li::before {
        content: "•";
        color: var(--color-primary);
        font-weight: bold;
        display: inline-block;
        margin-right: 0.5rem;
      }

      .blog-meta li strong {
        color: var(--color-primary);
        font-weight: 600;
        margin-right: 0.25rem;
      }
    </style>
  </body>
</html>