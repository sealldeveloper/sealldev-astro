---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import logoImage from "~/assets/logo.png";
import HeroImage from "~/components/hero-image.astro";
// import Starfield from "~/components/starfield.astro";
import GitHubCorner from "./github-corner.astro";
import type { FooterLink } from "~/types";
// Replace TriangleField with FallingImages
import FallingImages from "./falling-images.astro";

const widths = [450, 800];
const sizes = "(min-width: 640px) 42vw, 67vw";

const navItems = [
  { title: "Home", url: "/", icon: "mdi:home" },
  { title: "whoami", url: "/whoami", icon: "mdi:account" },
  { title: "Projects", url: "/projects", icon: "mdi:folder-multiple-outline" },
  { title: "CTFs", url: "/ctfs", icon: "mdi:flag" },
  { title: "Writeups", url: "/writeups", icon: "mdi:pencil" },
  { title: "Blog", url: "/blog", icon: "mdi:notebook-outline" },
  { title: "Museum", url: "/museum", icon: "mdi:museum" },
  { title: "Contact", url: "/contact", icon: "mdi:email" },
];
---

<section class="relative h-full bg-black z-10">
  <!-- Replace TriangleField with FallingImages -->
  <FallingImages />
  
  <div id="splash-bg-fallback" class="absolute inset-0 hidden opacity-40">
    <HeroImage />
  </div>
  
  <div class="relative grid h-full place-items-center sm:grid-cols-1">
    <h2
      class="flex flex-col items-center gap-2 self-center sm:gap-4 sm:self-auto sm:justify-self-center"
    >
      <Image
        src={logoImage}
        widths={widths}
        sizes={sizes}
        loading="eager"
        alt="sealldev"
        class="size-48 text-white md:size-64"
      />
      <div
        class="gradient-text text-center font-extrabold tracking-tighter text-6xl md:text-8xl"
      >
        sealldev
        <br /><br />
      </div>
      
      <!-- Navigation Bar -->
      <div class="flex flex-col items-center gap-3">
        <nav class="bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-lg px-4 py-3">
          <ul class="flex items-center gap-2">
            {
              navItems.map((item) => (
                <li class="group relative">
                  <a
                    href={item.url}
                    class="nav-item flex items-center justify-center p-2 rounded-md text-gray-300 hover:text-white hover:bg-slate-700/50 transition-all duration-200"
                    data-title={item.title}
                  >
                    <Icon class="size-5" name={item.icon} />
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
        
        <!-- Tooltip bubble that appears below -->
        <div id="nav-tooltip" class="bg-slate-800/80 backdrop-blur-sm border border-slate-700/50 rounded-lg px-3 py-2 text-sm text-white opacity-0 pointer-events-none transition-opacity duration-200">
          <span id="tooltip-text"></span>
        </div>
      </div>
    </h2>
  </div>
</section>

<script>
class SplashOptimizer {
  constructor() {
    this.isMobile = window.innerWidth < 768;
    this.isLowPowerMode = false;
    this.rafId = null;
    this.lastFrameTime = 0;
    
    // Detect low power mode
    this.detectLowPowerMode();
    
    // Apply optimizations
    this.applyOptimizations();
    
    // Setup resize observer
    this.setupResizeObserver();
    
    // Monitor performance
    this.monitorPerformance();
  }
  
  detectLowPowerMode() {
    // Check for various low power indicators
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    
    this.isLowPowerMode = (
      // Reduced data preference
      navigator.connection?.saveData ||
      // Slow connection
      (connection && (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g')) ||
      // Battery API indicates low battery
      (navigator.getBattery && navigator.getBattery().then(battery => battery.level < 0.2)) ||
      // Device memory is low
      (navigator.deviceMemory && navigator.deviceMemory < 2) ||
      // Hardware concurrency is low
      navigator.hardwareConcurrency < 4
    );
  }
  
  applyOptimizations() {
    const astronaut = document.getElementById('astronaut');
    const gradientText = document.querySelector('.gradient-text');
    
    if (this.isMobile || this.isLowPowerMode) {
      // Apply mobile/low-power optimizations
      if (astronaut) {
        astronaut.style.animationDuration = this.isLowPowerMode ? '5s' : '3s';
      }
      
      if (gradientText) {
        // Update both animations for mobile/low-power
        const gradientDuration = this.isLowPowerMode ? '10s' : '6s';
        const pulseDuration = this.isLowPowerMode ? '5s' : '3.5s';
        gradientText.style.animation = `gradient-move ${gradientDuration} ease-in-out infinite, pulsate ${pulseDuration} ease-in-out infinite`;
        
        // Simplify gradient on very low power devices
        if (this.isLowPowerMode) {
          gradientText.style.backgroundImage = 'linear-gradient(45deg, #8b5cf6, #d946ef)';
          gradientText.style.willChange = 'auto';
        }
      }
    }
    
    // Optimize based on frame rate
    this.optimizeFrameRate();
  }
  
  optimizeFrameRate() {
    let frameCount = 0;
    let lastFPSCheck = performance.now();
    
    const checkFPS = (timestamp) => {
      frameCount++;
      
      if (timestamp - lastFPSCheck >= 1000) {
        const fps = frameCount;
        frameCount = 0;
        lastFPSCheck = timestamp;
        
        // If FPS is consistently low, apply further optimizations
        if (fps < 30) {
          this.applyLowFPSOptimizations();
        }
      }
      
      this.rafId = requestAnimationFrame(checkFPS);
    };
    
    // Only monitor FPS for first 5 seconds to avoid continuous overhead
    this.rafId = requestAnimationFrame(checkFPS);
    setTimeout(() => {
      if (this.rafId) {
        cancelAnimationFrame(this.rafId);
        this.rafId = null;
      }
    }, 5000);
  }
  
  applyLowFPSOptimizations() {
    const astronaut = document.getElementById('astronaut');
    const gradientText = document.querySelector('.gradient-text');
    
    if (astronaut) {
      astronaut.style.animationDuration = '6s';
      astronaut.style.willChange = 'auto'; // Remove will-change to save memory
    }
    
    if (gradientText) {
      gradientText.style.animation = 'gradient-move 12s ease-in-out infinite, pulsate 6s ease-in-out infinite';
      gradientText.style.backgroundImage = 'linear-gradient(45deg, #8b5cf6, #d946ef)';
      gradientText.style.willChange = 'auto';
    }
  }
  
  setupResizeObserver() {
    const resizeObserver = new ResizeObserver(() => {
      const wasMobile = this.isMobile;
      this.isMobile = window.innerWidth < 768;
      
      // Only reapply optimizations if mobile state changed
      if (wasMobile !== this.isMobile) {
        this.applyOptimizations();
      }
    });
    
    resizeObserver.observe(document.body);
  }
  
  monitorPerformance() {
    // Use Intersection Observer to pause animations when splash is not visible
    const splashSection = document.querySelector('section');
    if (splashSection) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const astronaut = document.getElementById('astronaut');
          const gradientText = document.querySelector('.gradient-text');
          
          if (!entry.isIntersecting) {
            // Pause animations when not visible
            if (astronaut) astronaut.style.animationPlayState = 'paused';
            if (gradientText) gradientText.style.animationPlayState = 'paused';
          } else {
            // Resume animations when visible
            if (astronaut) astronaut.style.animationPlayState = 'running';
            if (gradientText) gradientText.style.animationPlayState = 'running';
          }
        });
      }, { threshold: 0.1 });
      
      observer.observe(splashSection);
    }
  }
}

// Initialize tooltip functionality
function initNavTooltips() {
  const navItems = document.querySelectorAll('.nav-item');
  const tooltip = document.getElementById('nav-tooltip');
  const tooltipText = document.getElementById('tooltip-text');
  
  if (!tooltip || !tooltipText) return;
  
  navItems.forEach(item => {
    item.addEventListener('mouseenter', () => {
      const title = item.getAttribute('data-title');
      if (title) {
        tooltipText.textContent = title;
        tooltip.classList.remove('opacity-0');
        tooltip.classList.add('opacity-100');
      }
    });
    
    item.addEventListener('mouseleave', () => {
      tooltip.classList.remove('opacity-100');
      tooltip.classList.add('opacity-0');
    });
  });
}

// Initialize optimizer when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  // Only initialize if not in reduced motion mode
  if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    new SplashOptimizer();
  }
  
  // Initialize tooltips
  initNavTooltips();
});

// Also try immediate initialization
if (document.readyState === 'complete' || document.readyState === 'interactive') {
  if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    new SplashOptimizer();
  }
  
  // Initialize tooltips
  initNavTooltips();
}
</script>

<noscript>
  <style>
    #splash-bg-fallback {
      display: block;
    }
  </style>
</noscript>

<style>
  @keyframes float {
    0% {
      transform: translate3d(0, 0, 0);
    }
    100% {
      transform: translate3d(0, 30px, 0);
    }
  }
  
  @keyframes gradient-move {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  
  @keyframes pulsate {
    0% {
      filter: brightness(1) saturate(1);
    }
    25% {
      filter: brightness(1.1) saturate(1.2);
    }
    50% {
      filter: brightness(1.2) saturate(1.4);
    }
    75% {
      filter: brightness(1.1) saturate(1.2);
    }
    100% {
      filter: brightness(1) saturate(1);
    }
  }
  
  #astronaut {
    animation: float linear 2.5s infinite alternate;
    /* Enable GPU acceleration for better performance */
    will-change: transform;
    transform-style: preserve-3d;
  }
  
  .gradient-text {
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-image: linear-gradient(
      45deg,
      #8b5cf6,    /* violet-500 */
      #a855f7,    /* purple-500 */
      #d946ef,    /* fuchsia-500 */
      #ec4899,    /* pink-500 */
      #f97316,    /* orange-500 */
      #eab308,    /* yellow-500 */
      #22c55e,    /* green-500 */
      #06b6d4,    /* cyan-500 */
      #3b82f6,    /* blue-500 */
      #8b5cf6     /* violet-500 - loop back */
    );
    background-size: 400% 400%;
    animation: 
      gradient-move 4s ease-in-out infinite,
      pulsate 2.5s ease-in-out infinite;
    /* Optimize text rendering and enable GPU acceleration */
    will-change: background-position, filter;
    backface-visibility: hidden;
    perspective: 1000px;
  }
  
  /* Mobile optimizations - reduce animation complexity */
  @media (max-width: 768px) {
    #astronaut {
      animation-duration: 3s; /* Slower animation on mobile */
    }
    
    .gradient-text {
      /* Simpler gradient on mobile for better performance */
      background-image: linear-gradient(
        45deg,
        #8b5cf6,
        #a855f7,
        #d946ef,
        #8b5cf6
      );
      animation: 
        gradient-move 6s ease-in-out infinite,
        pulsate 3.5s ease-in-out infinite; /* Slower pulsing on mobile */
    }
  }

  @media (max-width: 480px) {
    /* Further optimizations for small screens */
    #astronaut {
      animation-duration: 4s;
    }
    
    .gradient-text {
      animation: 
        gradient-move 8s ease-in-out infinite,
        pulsate 4s ease-in-out infinite; /* Even slower pulsing on small screens */
      /* Reduce will-change on very small screens to save memory */
      will-change: auto;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    #astronaut {
      @apply animate-none;
      will-change: auto; /* Remove will-change when animations disabled */
    }
    .gradient-text {
      animation: none;
      background-image: linear-gradient(to bottom right, #8b5cf6, #a855f7, #d946ef);
      background-size: 100% 100%;
      will-change: auto; /* Remove will-change when animations disabled */
    }
    :global(#starfield) {
      @apply hidden;
    }
    #splash-bg-fallback {
      @apply block;
    }
  }

  /* Battery and performance optimizations */
  @media (prefers-reduced-data: reduce) {
    .gradient-text {
      /* Simpler gradient for users on limited data */
      background-image: linear-gradient(45deg, #8b5cf6, #d946ef);
      animation-duration: 8s;
    }
  }
</style>