---
import { Icon } from "astro-icon/components";
import type { FooterLink, NavItem } from "~/types";
import footerGif from "~/assets/footer.gif";

import { getCollection } from "astro:content";
const seals = await getCollection("seals");
const imageUrls = seals.map(seal => seal.data.image.src);

const links: Array<FooterLink> = [
 {
    url: "https://twitter.com/sealldev",
    description: "Twitter",
    icon: "mdi:twitter",
  },
  {
    url: "https://github.com/sealldeveloper",
    description: "GitHub",
    icon: "fa-brands:github-alt",
  },
  {
    url: "https://discordapp.com/users/630874656198361099",
    description: "Discord",
    icon: "fa-brands:discord",
  },
  {
    url: "https://www.linkedin.com/in/noah-cooper-5442ab309/",
    description: "LinkedIn",
    icon: "fa-brands:linkedin",
  },
  {
    url: "mailto:seal@seall.dev",
    description: "Email",
    icon: "mdi:email",
  },
];

// Updated navigation items to match header with icons
const navItems: Array<NavItem & { icon: string }> = [
  { title: "Home", url: "/", icon: "mdi:home" },
  { title: "whoami", url: "/whoami", icon: "mdi:account" },
  { title: "CTFs", url: "/ctfs", icon: "mdi:flag" },
  { title: "Writeups", url: "/writeups", icon: "mdi:pencil" },
  { title: "Blog", url: "/blog", icon: "mdi:post" },
  { title: "Museum", url: "/museum", icon: "mdi:museum" },
  { title: "Contact", url: "/contact", icon: "mdi:email" },
];

const currentYear = new Date().getFullYear();
---

<footer class="relative flex h-auto flex-col items-center justify-center py-8">
  <div class="footer-bg absolute inset-0 overflow-hidden">
    <canvas id="footer-grid-canvas"></canvas>
  </div>
  <div class="relative w-full max-w-4xl px-4 z-10">
    
    <div class="footer-gif-container relative mb-6">
      <img 
        src={footerGif.src} 
        alt="Footer decoration"
        class="footer-gif"
        style={{
          /* Fine-grain positioning controls - adjust these values */
          '--gif-size': '120px',           /* Size of the GIF */
          '--gif-x-offset': '-390px',         /* Horizontal offset from center */
          '--gif-y-offset': '115px',         /* Vertical offset */
          '--gif-z-index': '20',           /* Z-index layering */
          '--gif-opacity': '1',            /* Opacity (0-1) */
          '--gif-rotation': '0deg',        /* Rotation angle */
          '--gif-scale': '1',              /* Scale factor */
        }}

      />
    </div>

    <ul class="mb-6 flex flex-wrap justify-center gap-4 md:justify-end">
      {
        links.map((link) => (
          <li>
            <a
              class="flex size-12 items-center justify-center rounded-full border-2 border-current p-3"
              href={link.url}
            >
              <span class="sr-only">{link.description}</span>
              <Icon class="size-full" name={link.icon} />
            </a>
          </li>
        ))
      }
    </ul>
    <hr class="mb-6 border-t-2 border-current" />
    <nav class="mb-4">
      <ul class="flex flex-wrap justify-center gap-x-6 gap-y-2">
        {
          navItems.map(({ title, url, icon }) => (
            <li>
              <a class="flex items-center gap-2 py-1 text-xs md:py-4 md:text-sm hover:text-primary transition-colors" href={url}>
                <Icon name={icon} class="size-3 md:size-4" />
                <span>{title}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <div class="mt-6 flex flex-col items-center justify-between gap-4 px-4 text-gray-300 md:flex-row">
      <small>Â© Copyright sealldev {currentYear}</small>
      <div class="text-center text-xs md:text-right">
        Made by <a href="https://seall.dev" class="hover:text-purple-400 transition-colors">sealldev</a> | 
        <a href="https://github.com/sealldeveloper/sealldev-astro" class="hover:text-purple-400 transition-colors">Source Code</a>
      </div>
    </div>
  </div>
</footer>

<script define:vars={{ imageUrls }}>
class ThemeDetector {
  static detectTheme() {
    // First, check for data-theme attribute
    const dataTheme = document.documentElement.dataset.theme;
    if (dataTheme) {
      return dataTheme;
    }

    // Fallback to explicit Astro theme classes
    if (document.documentElement.classList.contains('dark')) {
      return 'dark';
    }
    
    if (document.documentElement.classList.contains('light')) {
      return 'light';
    }

    // Next, check system preference
    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
    return prefersDarkMode ? 'dark' : 'light';
  }

  static getBackgroundColor(theme) {
    return theme === 'dark' ? 'black' : '#f4f4f4';
  }
}

class GridImage {
  constructor(imageSrc, x, y, cellSize) {
    this.image = new Image();
    this.imageSrc = imageSrc;
    this.loaded = false;
    this.loadError = false;
    
    // Position and size
    this.x = x;
    this.y = y;
    this.cellSize = cellSize;
    
    // Image dimensions
    this.imageWidth = 0;
    this.imageHeight = 0;
    this.aspectRatio = 1;
    
    // Visual properties
    this.opacity = 0.6 + Math.random() * 0.4;
    this.rotation = Math.random() * Math.PI * 2;
    this.rotationSpeed = (Math.random() - 0.5) * 0.02;
    
    // Movement properties - same speed as original
    this.slideSpeed = 0.8 + Math.random() * 0.4; // Fast diagonal movement like original
    
    // Set up image loading
    this.image.onload = () => {
      this.loaded = true;
      this.imageWidth = this.image.width;
      this.imageHeight = this.image.height;
      this.aspectRatio = this.imageWidth / this.imageHeight;
    };
    
    this.image.onerror = () => {
      this.loadError = true;
    };
    
    this.image.src = imageSrc;
  }
  
  update(canvasWidth, canvasHeight) {
    // Move diagonally down and to the right (fast like original)
    this.x += this.slideSpeed * 0.7; // Rightward movement
    this.y += this.slideSpeed;       // Downward movement
    
    // Update rotation
    this.rotation += this.rotationSpeed;
    
    // Reset position when off screen (wrap around)
    if (this.x > canvasWidth + this.cellSize || this.y > canvasHeight + this.cellSize) {
      // Reset to top-left with some random offset
      this.x = -this.cellSize - Math.random() * this.cellSize;
      this.y = -this.cellSize - Math.random() * this.cellSize;
    }
  }
  
  getRenderDimensions() {
    const size = this.cellSize * 0.8; // Slightly smaller than cell to create spacing
    
    if (this.loaded && !this.loadError) {
      if (this.aspectRatio > 1) {
        // Wider than tall
        return {
          width: size,
          height: size / this.aspectRatio
        };
      } else {
        // Taller than wide
        return {
          width: size * this.aspectRatio,
          height: size
        };
      }
    }
    
    return { width: size, height: size };
  }
  
  draw(ctx) {
    const dimensions = this.getRenderDimensions();
    
    ctx.save();
    
    // Move to center of cell and apply rotation
    ctx.translate(this.x + this.cellSize/2, this.y + this.cellSize/2);
    ctx.rotate(this.rotation);
    
    // Apply opacity
    ctx.globalAlpha = this.opacity;
    
    if (this.loaded && !this.loadError) {
      // Draw the actual image
      ctx.drawImage(
        this.image,
        -dimensions.width/2,
        -dimensions.height/2,
        dimensions.width,
        dimensions.height
      );
    } else {
      // Draw placeholder
      ctx.fillStyle = this.loadError ? '#ef4444' : '#a855f7';
      ctx.beginPath();
      ctx.arc(0, 0, dimensions.width/2, 0, Math.PI * 2);
      ctx.fill();
      
      ctx.fillStyle = '#ffffff';
      ctx.font = `${dimensions.width/4}px Arial`;
      ctx.textAlign = 'center';
      ctx.fillText(this.loadError ? '!' : '?', 0, dimensions.width/8);
    }
    
    ctx.restore();
  }
}

class FooterGridAnimation {
  constructor() {
    this.canvas = document.getElementById('footer-grid-canvas');
    
    if (!this.canvas) return;
    
    this.container = this.canvas.parentElement;
    this.ctx = this.canvas.getContext("2d", { willReadFrequently: false });
    this.gridImages = [];
    this.rafId = null;
    this.lastDrawTime = 0;
    this.startTime = Date.now();
    this.isMobile = window.innerWidth < 768;
    
    // Track current theme
    this.currentTheme = ThemeDetector.detectTheme();
    this.backgroundColor = ThemeDetector.getBackgroundColor(this.currentTheme);
    
    // Grid properties
    this.cellSize = this.isMobile ? 60 : 80;
    this.gridCols = 0;
    this.gridRows = 0;
    
    this.setupCanvas();
    this.createGrid();
    this.setupResizeObserver();
    this.animate();
  }
  
  setupCanvas() {
    const { clientWidth: width, clientHeight: height } = this.container;
    const dpr = window.devicePixelRatio || 1;
    this.canvas.width = width * dpr;
    this.canvas.height = height * dpr;
    this.canvas.style.width = `${width}px`;
    this.canvas.style.height = `${height}px`;
    this.ctx.scale(dpr, dpr);
  }
  
  createGrid() {
    const { clientWidth: width, clientHeight: height } = this.container;
    
    this.gridImages = [];
    
    // Create a shuffled array of image URLs to ensure random distribution
    const shuffledImages = [...imageUrls];
    
    // Create A LOT more images for a dense flowing column
    const totalImages = Math.ceil((width + height) / this.cellSize * 5); // 5x more images
    
    for (let i = 0; i < totalImages; i++) {
      // Pick random image from shuffled array
      const randomIndex = Math.floor(Math.random() * shuffledImages.length);
      const imageSrc = shuffledImages[randomIndex];
      
      // Shuffle array occasionally to maintain randomness
      if (Math.random() < 0.1) {
        for (let j = shuffledImages.length - 1; j > 0; j--) {
          const k = Math.floor(Math.random() * (j + 1));
          [shuffledImages[j], shuffledImages[k]] = [shuffledImages[k], shuffledImages[j]];
        }
      }
      
      // Spread images along the diagonal path to avoid the "ball" effect
      const progress = i / totalImages;
      const diagonalSpread = Math.max(width, height) * 0.8; // Spread them along the diagonal
      
      // Calculate position along the diagonal flow path
      const diagonalPosition = progress * diagonalSpread;
      
      // Base position (top-left entry point)
      const baseX = -this.cellSize - Math.random() * this.cellSize;
      const baseY = -this.cellSize - Math.random() * this.cellSize;
      
      // Offset along the diagonal to spread them out
      const offsetX = diagonalPosition * 0.7; // Rightward offset
      const offsetY = diagonalPosition;       // Downward offset
      
      const x = baseX + offsetX;
      const y = baseY + offsetY;
      
      this.gridImages.push(new GridImage(imageSrc, x, y, this.cellSize));
    }
  }
  
  setupResizeObserver() {
    this.resizeObserver = new ResizeObserver(() => {
      this.isMobile = window.innerWidth < 768;
      this.cellSize = this.isMobile ? 60 : 80;
      this.setupCanvas();
      this.createGrid();
    });
    this.resizeObserver.observe(this.container);
  }
  
  animate(timestamp) {
    const elapsed = timestamp - this.lastDrawTime;
    if (elapsed < 1000 / 60) { // 60 FPS target
      this.rafId = requestAnimationFrame(this.animate.bind(this));
      return;
    }
    
    // Check and update theme less frequently
    if (Math.random() < 0.02) {
      const detectedTheme = ThemeDetector.detectTheme();
      if (detectedTheme !== this.currentTheme) {
        this.currentTheme = detectedTheme;
        this.backgroundColor = ThemeDetector.getBackgroundColor(detectedTheme);
      }
    }
    
    const { clientWidth: width, clientHeight: height } = this.container;
    
    // Clear canvas
    this.ctx.fillStyle = this.backgroundColor;
    this.ctx.fillRect(0, 0, width, height);
    
    // Update and draw all grid images
    this.gridImages.forEach(gridImage => {
      gridImage.update(width, height);
      gridImage.draw(this.ctx);
    });
    
    this.lastDrawTime = timestamp;
    this.rafId = requestAnimationFrame(this.animate.bind(this));
  }
  
  cleanup() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
    if (this.rafId) {
      cancelAnimationFrame(this.rafId);
      this.rafId = null;
    }
    
    this.gridImages = [];
    this.ctx = null;
    this.canvas = null;
    this.container = null;
  }
}

// Initialize footer animation when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  console.log('Initializing footer grid animation with URLs:', imageUrls);
  const footerAnim = new FooterGridAnimation();
  
  // Cleanup on page navigation
  document.addEventListener("astro:before-preparation", () => {
    if (footerAnim && typeof footerAnim.cleanup === 'function') {
      footerAnim.cleanup();
    }
  });
});

// Also try immediate initialization in case DOM is already ready
const footerAnim = new FooterGridAnimation();
if (footerAnim) {
  document.addEventListener("astro:before-preparation", () => {
    if (footerAnim && typeof footerAnim.cleanup === 'function') {
      footerAnim.cleanup();
    }
  });
}
</script>

<style>
footer {
  position: relative;
  z-index: 1;
  background-color: black;
}

.footer-bg {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: -1;
  pointer-events: none;
  opacity: 1;
}

/* Footer GIF Positioning Styles */
.footer-gif-container {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
}

.footer-gif {
  width: var(--gif-size);
  height: var(--gif-size);
  transform: 
    translate(var(--gif-x-offset), var(--gif-y-offset))
    rotate(var(--gif-rotation))
    scale(var(--gif-scale));
  opacity: var(--gif-opacity);
  z-index: var(--gif-z-index);
  position: relative;
  object-fit: contain;
  
  /* Optional: Add filters for visual effects */
  /* filter: brightness(1.1) contrast(1.1); */
  /* filter: hue-rotate(15deg); */
  /* filter: drop-shadow(0 0 10px rgba(147, 51, 234, 0.5)); */
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .footer-gif {
    width: calc(var(--gif-size) * 0.8);
    height: calc(var(--gif-size) * 0.8);
  }
}

a {
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}
</style>